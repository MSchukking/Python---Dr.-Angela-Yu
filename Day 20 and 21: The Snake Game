# we mar 9, we mar 10, su mar 13 and mo mar 14, we mar 23, th mar 24, 2022
# day 20 - the snake game - part 1
# day 21 - the snake game - part 2
# day 24 - the snake game - better version
# OBJECTIVE: Create the Nokia snake game

"""main.py controls the entire game: dictates how the screen should behave, how the snake behaves"""

from turtle import Screen
from snake import Snake
from food import Food
from scoreboard import Score
import time  # this time module will help to slow down what is happening

# create screen and adjust its appearance:
screen = Screen()
screen.setup(width=600, height=600)  # set the screens sizes
screen.bgcolor("black")  # set the screens background color
screen.title("Snake Game")  # set the title at the top of the screen
# make the snake move smoothly as one piece:
screen.tracer(0)  # turns tracer off -> now screen.update() can be used to tell the program when to refresh the screen
# without screen.update() we will only see a black screen

snake = Snake()

# ToDo 4a: Put food (a blue circle) on the screen and detect collision of the food
food = Food()
scoreboard = Score()

# ToDo 3: CONTROL THE SNAKE
screen.listen()  # start listening for keystrokes
screen.onkey(key="Up", fun=snake.up)
screen.onkey(key="Down", fun=snake.down)
screen.onkey(key="Left", fun=snake.left)
screen.onkey(key="Right", fun=snake.right)

# ToDo 2: MOVE THE SNAKE
game_is_on = True
while game_is_on:
    screen.update()  # refresh the screen
    time.sleep(0.1)  # delay for 0.1 second

    snake.move()

    # ToDo 4b: DETECT COLLISION WITH FOOD
    # 1) snake hits a piece of food
    # 2) everytime snake touches the food, food moves to a random location on the screen
    # detect collision with food:
    head = snake.all_segments[0]
    if head.distance(food) < 15:  # food is 10 by 10 so distance of 15 works good
        food.refresh()  # refresh foods location
        snake.extend()
        scoreboard.update_score()

    # detect collision with wall:
    if head.xcor() > 280 or head.xcor() < -290 or head.ycor() > 280 or head.ycor() < -280:
        scoreboard.reset()
        snake.reset()

# make code above shorter by using slicing:
    for segment in snake.all_segments[1:]:  # all segments except the head
        if head.distance(segment) < 10:
            scoreboard.reset()
            snake.reset()

screen.exitonclick()  # screen only disappears when you click


# data.txt

0


# snake.py

from turtle import Turtle

# NOTE: writing CONSTANTS as variables is good, because then you do not have to dig through the code to change them
STARTING_POSITIONS = [(0,0), (-20, 0), (-40, 0)]
MOVE_DISTANCE = 20
UP = 90
DOWN = 270
LEFT = 180
RIGHT = 0


class Snake:
    """contains everything snake related: its appearance and behaviour"""

    def __init__(self):
        """initializes a new Snake object"""
        self.all_segments = []
        self.create_snake()

    def create_snake(self):
        """creates a new snake"""
        for position in STARTING_POSITIONS:
            self.add_segment(position)

    def add_segment(self, position):
        """returns position to where the segment should be added"""
        new_segment = Turtle(shape="square")
        new_segment.penup()
        new_segment.goto(position)
        new_segment.color("white")
        self.all_segments.append(new_segment)

    def reset(self):
        """initiates a new snake once game is over"""
        for segment in self.all_segments:
            segment.goto(1000, 1000)  # send current segments to a place off the screen.
            # if you don't do this, you will keep seeing the segments of the previous snake on the screen.
        self.all_segments.clear()  # removes all items from list
        self.create_snake()

    def extend(self):
        """adds a new segment to the end of the snake"""
        self.add_segment(self.all_segments[-1].position())  # get hold of the last segment in the list of segments

    def move(self):
        """moves all segments of the snake forward: first the third segment goes were the second segment was, secondly the
          2nd segment goes where the 1st segment was, lastly the first segment moves forward"""
        for segment_number in range(len(self.all_segments) - 1, 0, -1):  # range(start=len(all_segments)-1, stop=0,
            # step=-1)
            # going from segment#3 to segment#0
            new_x = self.all_segments[segment_number - 1].xcor()
            new_y = self.all_segments[segment_number - 1].ycor()
            self.all_segments[segment_number].goto(new_x, new_y)
        self.all_segments[0].forward(MOVE_DISTANCE)

    def up(self):
        """turns the first segment facing upwards"""
        if self.all_segments[0].heading() != DOWN:  # snake is not allowed to turn around
            self.all_segments[0].setheading(UP)

    def down(self):
        """turns the first segment facing downwards"""
        if self.all_segments[0].heading() != UP:  # snake is not allowed to turn around
            self.all_segments[0].setheading(DOWN)

    def left(self):
        """turns the first segment facing left"""
        if self.all_segments[0].heading() != RIGHT:  # snake is not allowed to turn around
            self.all_segments[0].setheading(LEFT)

    def right(self):
        """turns the first segment facing right"""
        if self.all_segments[0].heading() != LEFT:  # snake is not allowed to turn around
            self.all_segments[0].setheading(RIGHT)


# food.py

from turtle import Turtle
import random


class Food(Turtle):  # Food class inherits from Turtle superclass

    """It renders itself as a small circle on the screen. Everytime the snake touches
    the food, then the food is going to be placed on a new random location on the screen"""

    def __init__(self):
        """Initializes a new food object"""
        super().__init__()  # allows anything from the superclass to be inherited
        self.shape("circle")
        self.penup()
        self.shapesize(stretch_len=0.5, stretch_wid=0.5)  # normally turtle is 20 by 20, but you want 10 by 10(so x 0.5)
        self.color("blue")
        self.speed("fastest")
        self.refresh()  # locates food at a random location in the screen


    def refresh(self):
        """locates food at a new random location in the screen"""
        random_x = random.randint(-280, 280)
        random_y = random.randint(-280, 280)
        self.goto(random_x, random_y)  # put food at a random location


# scoreboard.py

from turtle import Turtle

# constant variables:
ALIGNMENT = "center"
FONT = ("Courier", 18, "normal")  # Courier is a good video game letter type

class Score(Turtle):  # Score inherits from Turtle superclass
    """a turtle that keeps track of the score and displays the score in the program"""

    def __init__(self):
        """initializes a new scoreboard object"""
        super().__init__()  # score inherits from Turtle superclass
        self.score = 0
        self.display_score()

    def display_score(self):
        """displaying sum of points at the top of the screen"""
        self.clear()
        self.goto(0, 280)  # put text at the bottom of the screen
        self.hideturtle()  # hide turtle, otherwise you see turtle below the text
        self.color("white")
        with open("data.txt", mode="r") as data:
            high_score = int(data.read())
        self.write(f"SCORE = {self.score} High Score: {high_score} ", align=ALIGNMENT, font=FONT)

    def reset(self):
        """rewrites the high_score in the file data.txt to the score of the current score, if this was
        higher than the previous high_score. Resets current score to zero"""
        with open("data.txt", mode="r") as data:
            high_score = int(data.read())
            if self.score >= high_score:
                with open("data.txt", mode="w") as data:
                    self.score = str(self.score)
                    data.write(self.score)
        self.score = 0
        self.display_score()

    def update_score(self):
        """adds a point to the score and display new score"""
        self.score += 1
        self.clear()
        self.display_score()
