# tu mar 15, 2022, we mar 16, 2022
# day 22. build pong: the famous arcade game
# OBJECTIVE: build the ping pong game

# DONE - todo 1: create the screen
# DONE - todo 2: create and move a paddle
# DONE - todo 3: create another paddle
# DONE - todo 4: create a ball and move it constantly across the screen
# todo 5: detect collision with wall and bounce back
# todo 6: detect collision with paddle to make it bounce back
# todo 7: score: detect when paddle misses
# todo 8: keep score


from turtle import Screen
from paddle import Paddle
from ball import Ball
import time  # this time module will help to slow down what is happening


# todo 1: create the screen and adjust its appearance:
screen = Screen()
screen.setup(width=600, height=600)  # change screen size
screen.bgcolor("black")  # set screen background to black
screen.title("Pong Game")  # set the title at the top of the screen

# make the game move smoothly:
screen.tracer(0)  # turns tracer off --> now screen.update() can be used to tell the program to refresh the screen
# without screen.update() we will only see a black screen cause it is never updated

# todo 2a: create a paddle:
paddle = Paddle(start_x=-280, start_y=30)
# todo 3: create another paddle
paddle2 = Paddle(start_x=270, start_y=30)

# todo 4: create a ball and move it constantly across the screen
ball = Ball()

# todo 2b: move the paddle:
screen.listen()  # start listening for keystrokes
screen.onkey(key="Up", fun=paddle.up)
screen.onkey(key="Down", fun=paddle.down)

game_is_on = True
while game_is_on:
    screen.update()  # refreshes the screen (only works when screen.tracer(0) in code before)
    time.sleep(0.1)  # delays what is happening for 0.1 second

    paddle.move()
    ball.move()  # move the ball in constant speed

# todo 5: detect collision with wall and bounce back
    if ball.ycor() == 280 or ball.ycor() == -280:
        heading_after_wall = 360 - ball.heading()  # move the ball the opposite direction of where it was heading
        ball.setheading(heading_after_wall)

    # # # todo 6: detect collision with paddle to make it bounce back
    # if paddle.distance(ball) < 15:  # ball is 10 by 10 so distance 15 works well
    #     new_heading = 360 - ball.heading()  # change heading of ball in opposite site
    #     ball.setheading(new_heading)

screen.exitonclick()  # screen only disappears when you click


# paddle.py

from turtle import Turtle

# CONSTANT VARIABLES:
UP = 90  # faces 90 degrees
DOWN = 270  # faces 270 degrees
MOVE_DISTANCE = 20  # determines the moving speed of the paddle


class Paddle:
    """contains anything paddle related: its appearance and behaviour"""

    def __init__(self, start_x, start_y):
        """initialize a new paddle object"""
        self.paddle = Turtle(shape="square")  # a turtle square is 20 by 20
        self.paddle.shapesize(stretch_wid=1, stretch_len=3)  # increase len x3
        self.paddle.penup()
        self.paddle.goto(start_x, start_y)
        self.paddle.color("white")
        self.paddle.setheading(UP)  # so it starts with moving up

    def move(self):
        self.paddle.forward(MOVE_DISTANCE)

    def up(self):
        """moves paddle up"""
        self.paddle.setheading(UP)

    def down(self):
        """moves paddle down"""
        self.paddle.setheading(DOWN)


# ball.py

# todo 4: create a ball and move it constantly across the screen

from turtle import Turtle


UP = 90  # faces 90 degrees
LEFT = 180  # faces 180 degrees
DOWN = 270  # faces 270 degrees
MOVE_DISTANCE = 20  # determines the moving speed of the paddle
START_X = 260
START_Y = 10


class Ball(Turtle):  # class Ball inherits from superclass Turtle
    """it renders itself as a small circle on the screen. Everytime the paddle touches the ball, the ball
    goes in the other direction"""

    def __init__(self):
        """initializes a new object from class Ball"""
        super().__init__()  # allows anything from the superclass Turtle to be inherited
        self.shape("circle")
        self.penup()  # do not let the ball leave a pen track
        self.goto(START_X, START_Y)  # start point of the ball
        self.shapesize(stretch_len=0.5, stretch_wid=0.5)  # normally turtle is 20 by 20, now you multiply 0.5 = 10 by 10
        self.color("white")
        self.speed("normal")  # normal speed is 6, fastest is 0, slowest is 1
        self.setheading(LEFT)  # so it starts with moving towards the paddle

    def move(self):
        """moves the ball constantly across the screen"""
        self.forward(MOVE_DISTANCE)
